which(dropoff_longitude < nw$lon
| dropoff_longitude > se$lon),
NA)) %>%
mutate(dropoff_latitude = replace(dropoff_latitude,
which(dropoff_latitude < se$lat
| dropoff_latitude > nw$lat),
NA))
# Duplicar Dataset para modificarlo
#df2 <- df
# Encontrar y eliminar filas con valor NAs
#df <- df[!is.na(df$pickup_longitude), ]
#df <- df[!is.na(df$pickup_latitude), ]
#df <- df[!is.na(df$dropoff_longitude), ]
#df <- df[!is.na(df$dropoff_latitude), ]
#df
# Encontrar y eliminar filas con valor NAs
#df <- df[!is.na(df$pickup_longitude), ]
#df <- df[!is.na(df$pickup_latitude), ]
#df <- df[!is.na(df$dropoff_longitude), ]
#df <- df[!is.na(df$dropoff_latitude), ]
#df
# Generamos las variables necesarias
# Calcular tiempo
time <- df$dropoff_datetime - df$pickup_datetime
time
df$trip_time_in_secs[1]-time[1]
df$trip_time_in_secs[2]-time[2]
df$trip_time_in_secs[3]-time[3]
df$trip_time_in_secs[4]-time[4]
time[4]
df$trip_time_in_secs[5]-time[5]
df$trip_time_in_secs[6]-time[6]
# Realizamos las trasformaciones mencionadas
df <- df %>%
mutate(trip_time_in_secs = replace(trip_time_in_secs,
which(trip_time_in_secs-time > 1 | trip_time_in_secs-time < -1 |
trip_time_in_secs == 0),
NA)) %>%
mutate(rate_code = replace(rate_code,
which(rate_code == 0),
NA)) %>%
mutate(trip_distance = replace(trip_distance,
which(trip_distance == 0),
NA))
sapply(df, function(y) sum(is.na(y)))
df <- df %>% select(-store_and_fwd_flag)
table(complete.cases(df))
# Eliminamos Nan Generados
#df <- df[!is.na(df$trip_time_in_secs), ]
#df <- df[!is.na(df$rate_code), ]
#df <- df[!is.na(df$trip_distance), ]
#df <- df[!is.na(df$pickup_longitude), ]
#df <- df[!is.na(df$pickup_latitude), ]
#df <- df[!is.na(df$dropoff_longitude), ]
#df <- df[!is.na(df$dropoff_latitude), ]
dim(df)
# Realizamos las trasformaciones mencionadas
df <- df %>%
mutate(trip_time_in_secs = replace(trip_time_in_secs,
which(trip_time_in_secs-time > 1 | trip_time_in_secs-time < -1 |
trip_time_in_secs == 0),
NA)) %>%
mutate(rate_code = replace(rate_code,
which(rate_code == 0),
NA)) %>%
mutate(trip_distance = replace(trip_distance,
which(trip_distance == 0),
NA))
sapply(df, function(y) sum(is.na(y)))
# Realizamos las trasformaciones mencionadas
df <- df %>%
mutate(trip_time_in_secs = replace(trip_time_in_secs,
which(trip_time_in_secs-time > 1 | trip_time_in_secs-time < -1 |
trip_time_in_secs == 0),
NA)) %>%
mutate(rate_code = replace(rate_code,
which(rate_code == 0),
NA)) %>%
mutate(trip_distance = replace(trip_distance,
which(trip_distance == 0),
NA)) %>%
mutate(rate_code = replace(passenger_count,
which(passenger_count == 0),
NA))
sapply(df, function(y) sum(is.na(y)))
sapply(df, function(y) sum(is.na(y)))
rm(list=ls())
library(knitr)
opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)
library(tidyverse)
library(cowplot)
library(hexbin)
library(lubridate)
library(scales)
#theme_set(theme_cowplot(font_size=12)) # reduce default font size
# source: https://www.r-bloggers.com/great-circle-distance-calculations-in-r/
# Convert degrees to radians
deg2rad <- function(deg) {
return(deg*pi/180)
}
# Calculates the great-circle distance (gdc), also called geodesic distance,
# between two points specified by radian latitude/longitude using the Spherical
# Law of Cosines (slc) The Spherical Law of Cosines performs well as long as the
# distance is not to small (some sources claim it’s accuracy deteriorates at
# about the 1 metre scale).
# Return distance in Km
gcd_slc <- function(long1, lat1, long2, lat2) {
# Convert degrees to radians
long1 <- deg2rad(long1)
lat1 <- deg2rad(lat1)
long2 <- deg2rad(long2)
lat2 <- deg2rad(lat2)
R <- 6371 # Earth mean radius [km]
d <- acos(sin(lat1)*sin(lat2) + cos(lat1)*cos(lat2) * cos(long2-long1)) * R
return(d) # Distance in km
}
df <- read_csv("data/trip_data_2013-01-14.csv")
colnames(df)
summary(df)
plot1 <- ggplot(df, aes(x=pickup_longitude)) + stat_ecdf()
plot2 <- ggplot(df, aes(x=pickup_latitude)) + stat_ecdf()
plot_grid(plot1, plot2, labels = c('lon', 'lat'))
# Comprobar valores Nan
which(is.na(df$medallion))
which(is.na(df$hack_license))
which(is.na(df$vendor_id))
which(is.na(df$rate_code))
which(is.na(df$pickup_datetime))
which(is.na(df$dropoff_datetime))
which(is.na(df$passenger_count))
which(is.na(df$trip_time_in_secs))
which(is.na(df$trip_distance))
which(is.na(df$pickup_longitude))
which(is.na(df$pickup_latitude))
which(is.na(df$dropoff_latitude))
which(is.na(df$dropoff_longitude))
# Imprimir Dataset
print(df)
# Incluir las coordenadas correspondientes, y ejecutar el trozo de código
nw <- list(lat = 40.917577, lon = -74.259090)
se <- list(lat = 40.477399, lon = -73.700272)
# set coordinates outside of NYC bounding box to NA
df <- df %>%
mutate(pickup_longitude = replace(pickup_longitude,
which(pickup_longitude < nw$lon
| pickup_longitude > se$lon),
NA)) %>%
mutate(pickup_latitude = replace(pickup_latitude,
which(pickup_latitude < se$lat
| pickup_latitude > nw$lat),
NA)) %>%
mutate(dropoff_longitude = replace(dropoff_longitude,
which(dropoff_longitude < nw$lon
| dropoff_longitude > se$lon),
NA)) %>%
mutate(dropoff_latitude = replace(dropoff_latitude,
which(dropoff_latitude < se$lat
| dropoff_latitude > nw$lat),
NA))
# Duplicar Dataset para modificarlo
#df2 <- df
# Encontrar y eliminar filas con valor NAs
#df <- df[!is.na(df$pickup_longitude), ]
#df <- df[!is.na(df$pickup_latitude), ]
#df <- df[!is.na(df$dropoff_longitude), ]
#df <- df[!is.na(df$dropoff_latitude), ]
#df
# Generamos las variables necesarias
# Calcular tiempo
time <- df$dropoff_datetime - df$pickup_datetime
#time
df$trip_time_in_secs[6]-time[6]
time[4]
# Calcular Distancia
#gps_start <- df$pickup_longitude/df$pickup_latitude
#gps_end <- df$dropoff_longitude/df$dropoff_latitude
#ds <- gcd_slc(df$pickup_longitude, df$pickup_latitude, df$dropoff_longitude, df$dropoff_latitude)
# Realizamos las trasformaciones mencionadas
df <- df %>%
mutate(trip_time_in_secs = replace(trip_time_in_secs,
which(trip_time_in_secs-time > 1 | trip_time_in_secs-time < -1 |
trip_time_in_secs == 0),
NA)) %>%
mutate(rate_code = replace(rate_code,
which(rate_code == 0),
NA)) %>%
mutate(trip_distance = replace(trip_distance,
which(trip_distance == 0),
NA)) %>%
mutate(rate_code = replace(passenger_count,
which(passenger_count == 0),
NA))
# Eliminamos Nan Generados
#df <- df[!is.na(df$trip_time_in_secs), ]
#df <- df[!is.na(df$rate_code), ]
#df <- df[!is.na(df$trip_distance), ]
#df <- df[!is.na(df$pickup_longitude), ]
#df <- df[!is.na(df$pickup_latitude), ]
#df <- df[!is.na(df$dropoff_longitude), ]
#df <- df[!is.na(df$dropoff_latitude), ]
dim(df)
df
sapply(df, function(y) sum(is.na(y)))
df <- df %>% select(-store_and_fwd_flag)
table(complete.cases(df))
hack_license <- as.data.frame(table(df$hack_license))
plot1 <- ggplot(hack_license, aes(Freq)) + stat_ecdf()
plot2 <- ggplot(hack_license, aes(Freq)) + geom_histogram(binwidth = 5)
plot_grid(plot1, plot2, labels = c("ecdf", "hist"))
pickup_lonlat <- data.frame(x=df$pickup_longitude, y=df$pickup_latitude)
plot_pickup <- ggplot(pickup_lonlat) + stat_binhex(aes(x=x, y=y), bins=300) +
scale_fill_gradientn(colours=c("black","green"))
dropoff_lonlat <- data.frame(x=df$dropoff_longitude, y=df$dropoff_latitude)
plot_dropoff <- ggplot(dropoff_lonlat) + stat_binhex(aes(x=x, y=y), bins=300) +
scale_fill_gradientn(colours=c("black","green"))
plot_grid(plot_pickup, plot_dropoff, labels = c('Pickup', 'Dropoff'))
dropoffs <- data.frame(time=sort(df$dropoff_datetime))
dropoff_by_hour <- cut(dropoffs$time, breaks="1 hour", labels=FALSE)-1
ts_dropoff <- dropoffs %>%
mutate(hour = dropoff_by_hour) %>%
group_by(hour) %>%
summarise(freq = length(hour))
ts_dropoff$hour <- as.POSIXct(ts_dropoff$hour*3600, origin = "1970-01-01", tz = "UTC")
ggplot(ts_dropoff, aes(hour, freq)) + geom_line() +
scale_x_datetime(labels = date_format("%k"),
breaks = date_breaks("1 hour"),
minor_breaks = date_breaks("30 min")) +
xlab("") + ylab("Número de bajadas")
jfk_pickups <- df %>%
filter(jfk_nw$lon < pickup_longitude & pickup_longitude < jfk_se$lon ) %>%
filter(jfk_se$lat < pickup_latitude & pickup_latitude < jfk_nw$lat)
y en total cuantos registros han sido afectados. Antes eliminamos el atributo _store_and_fwd_flag_ ya que tiene un número elevado de <code>NA</code>, y además no sabemos interpretar.
```{r}
df <- df %>% select(-store_and_fwd_flag)
table(complete.cases(df))
```
table(df)
solution<-as.data.frame(table(unlist(df)))
solution
u <- unique(df)
u <- unique(df$medallion)
dim(u)
dim(u)
u <- unique(df$medallion)
df$medallion
unique(df$medallion)
dim(unique(df$medallion))
dim(unique(df$medallion))
length(unique(df$medallion))
print('nº de taxistas en el dataset:', length(unique(df$medallion)))
l <- length(unique(df$medallion))
print('nº de taxistas en el dataset:', l)
l
print('nº de taxistas en el dataset:', l)
print("nº de taxistas en el dataset:", l)
l
print("nº de taxistas en el dataset:", l)
print("nº de taxistas en el dataset:")
l
print("nº de taxistas en el dataset:")
length(unique(df$medallion))
("nº de taxistas en el dataset:")
length(unique(df$medallion))
length(unique(df$hack_license))
table(hack_license)
table(df$hack_license)
mean(table(df$hack_license))
print("Media de viajes de los taxistas")
mean(table(df$hack_license))
print("Maximo de viajes de los taxistas")
max(table(df$hack_license))
print("Tiempo medio de viajes")
mean(table(df$trip_time_in_secs))
print("Distancia media de viajes")
max(table(df$trip_distance))
plot1 <- ggplot(trip_distance, aes(Freq)) + stat_ecdf()
plot1 <- ggplot(hack_license, aes(Freq)) + stat_ecdf()
plot2 <- ggplot(hack_license, aes(Freq)) + geom_histogram(binwidth = 5)
plot_grid(plot1, plot2, labels = c("ecdf", "hist"))
solution<-as.data.frame(table(unlist(hack_license)))
solution<-as.data.frame(table(unlist(hack_license)))
print("nº de taxistas en el dataset:")
length(solution)
print("Media de viajes de los taxistas")
mean(solution)
print("Maximo de viajes de los taxistas")
max(solution)
solution<-as.data.frame(table(unlist(df$hack_license)))
print("nº de taxistas en el dataset:")
length(solution)
print("Media de viajes de los taxistas")
mean(solution)
print("Maximo de viajes de los taxistas")
max(solution)
table(df$trip_distance)
print("Tiempo medio de viajes")
mean(table(df$trip_time_in_secs))
print("Distancia media de viajes")
mean(table(df$trip_distance))
solution<-as.data.frame(table(unlist(df)))
solution
print("nº de taxistas en el dataset:")
length(unique(df$hack_license))
print("Media de viajes de los taxistas")
mean(table(df$hack_license))
print("Maximo de viajes de los taxistas")
max(table(df$hack_license))
print("Velocidad media conducida")
mean(table(df$trip_distance/df$trip_time_in_secs))
passenger_count <- as.data.frame(table(df$passenger_count))
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot_grid(plot1, labels = c("ecdf"))
max(passenger_count)
max(df$passenger_count)
passenger_count <- as.data.frame(table(df$passenger_count))
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot_grid(plot1, labels = c("ecdf"))
passenger_count <- table(df$passenger_count)
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot1 <- ggplot(table(df$passenger_count), aes(Freq)) + stat_ecdf())
plot_grid(plot1, labels = c("ecdf"))
plot1 <- ggplot(table(df$passenger_count), aes(Freq)) + stat_ecdf())
plot1 <- ggplot(table(df$passenger_count)), aes(Freq)) + stat_ecdf())
plot1 <- ggplot(table(df$passenger_count)), aes(Freq)) + stat_ecdf()
plot1 <- ggplot(table(df$passenger_count), aes(Freq)) + stat_ecdf()
plot1 <- ggplot(table(df$passenger_count), aes(Freq) + stat_ecdf()
plot1 <- ggplot(table(df$passenger_count), aes(Freq) + stat_ecdf()
plot1 <- ggplot(table(df$passenger_count)), aes(Freq) + stat_ecdf()
plot_grid(plot1, labels = c("ecdf"))
plot1 <- ggplot(table(df$passenger_count), aes(Freq)) + stat_ecdf()
plot_grid(plot1, labels = c("ecdf"))
plot1 <- ggplot(table(df$passenger_count), aes(Freq)) + stat_ecdf()
passenger_count <- as.data.frame(table(df$passenger_count))
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
(plot1, labels = c("ecdf"))
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot_grid(plot1, labels = c("ecdf"))
View(passenger_count)
str(passenger_count)
freqRel$X=as.integer(as.character(passenger_count$X))
passenger_count$X=as.integer(as.character(passenger_count$X))
str(passenger_count)
passenger_count$Var1=as.integer(as.character(passenger_count$Var1))
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot_grid(plot1, labels = c("ecdf"))
str(passenger_count)
plot.ecdf(passenger_count)
plot.ecdf(passenger_count$Var1)
passenger_count <- as.data.frame(table(df$passenger_count))
passenger_count <- as.data.frame(table(df$passenger_count))
str(passenger_count)
str(passenger_count)
passenger_count$Var1=as.integer(as.character(passenger_count$Var1))
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot_grid(plot1, labels = c("ecdf"))
passenger_count <- as.data.frame(table(df$passenger_count))
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot2 <- ggplot(passenger_count, aes(Freq)) + geom_histogram(binwidth = 5)
plot_grid(plot1, plot2, labels = c("ecdf", "hist"))
passenger_count <- as.data.frame(table(df$passenger_count))
plot1 <- ggplot(passenger_count, aes(Freq)) + stat_ecdf()
plot_grid(plot1, labels = c("ecdf"))
pickup_lonlat <- data.frame(x=df$pickup_longitude, y=df$pickup_latitude)
plot_pickup <- ggplot(pickup_lonlat) + stat_binhex(aes(x=x, y=y), bins=300) +
scale_fill_gradientn(colours=c("black","green"))
dropoff_lonlat <- data.frame(x=df$dropoff_longitude, y=df$dropoff_latitude)
plot_dropoff <- ggplot(dropoff_lonlat) + stat_binhex(aes(x=x, y=y), bins=300) +
scale_fill_gradientn(colours=c("black","green"))
plot_grid(plot_pickup, plot_dropoff, labels = c('Pickup', 'Dropoff'))
```{r}
dropoffs <- data.frame(time=sort(df$dropoff_datetime))
dropoff_by_hour <- cut(dropoffs$time, breaks="1 hour", labels=FALSE)-1
ts_dropoff <- dropoffs %>%
mutate(hour = dropoff_by_hour) %>%
group_by(hour) %>%
summarise(freq = length(hour))
ts_dropoff$hour <- as.POSIXct(ts_dropoff$hour*3600, origin = "1970-01-01", tz = "UTC")
ggplot(ts_dropoff, aes(hour, freq)) + geom_line() +
scale_x_datetime(labels = date_format("%k"),
breaks = date_breaks("1 hour"),
minor_breaks = date_breaks("30 min")) +
xlab("") + ylab("Número de bajadas")
jfk_nw <- list(lat = 40.651381, lon = -73.794694)
jfk_se <- list(lat = 40.640668, lon = -73.776283)
jfk_pickups <- df %>%
filter(jfk_nw$lon < pickup_longitude & pickup_longitude < jfk_se$lon ) %>%
filter(jfk_se$lat < pickup_latitude & pickup_latitude < jfk_nw$lat)
jfk_dropoffs <- df %>%
filter(jfk_nw$lon < dropoff_longitude & dropoff_longitude < jfk_se$lon ) %>%
filter(jfk_se$lat < dropoff_latitude & dropoff_latitude < jfk_nw$lat)
length(jfk_pickups)
length(jfk_dropoffs)
```{r}
length(jfk_pickups)
length(jfk_dropoffs)
jfk_dropoffs
dim(jfk_pickups)
dim(jfk_pickups)
dim(jfk_dropoffs)
dim(df)
dim(jfk_pickups)
dim(jfk_dropoffs)
dim(df)
print("Total dataset:")
dim(df[1])
print("Total JFK":)
print("Total dataset: ")
dim(df[1])
print("Total JFK: ")
dim(jfk_pickups) + dim(jfk_dropoffs)
print("pickups JFK: ")
dim(jfk_pickups)
print("dropoff JFK: ")
dim(jfk_dropoffs)
print("Total dataset: ")
dim(df[1])
print("\nTotal JFK: ")
dim(jfk_pickups) + dim(jfk_dropoffs)
print("pickups JFK: ")
dim(jfk_pickups)
print("dropoff JFK: ")
dim(jfk_dropoffs)
print("Total dataset: ")
dim(df[1])
print("Total JFK: ")
dim(jfk_pickups) + dim(jfk_dropoffs)
print("pickups JFK: ")
dim(jfk_pickups)
print("dropoff JFK: ")
dim(jfk_dropoffs)
print("Total dataset: ")
dim(df[1])
print("Total JFK: ")
dim(jfk_pickups[1]) + dim(jfk_dropoffs[1])
print("pickups JFK: ")
dim(jfk_pickups[1])
print("dropoff JFK: ")
dim(jfk_dropoffs[1])
jfk_pickup_lonlat <- data.frame(x=jfk_pickups$dropoff_longitude, y=jfk_pickups$dropoff_latitude)
jfk_plot_pickup <- ggplot(jfk_pickup_lonlat) + stat_binhex(aes(x=x, y=y), bins=300) +
scale_fill_gradientn(colours=c("black","green"))
jfk_dropoff_lonlat <- data.frame(x=jfk_dropoffs$pickup_longitude, y=jfk_dropoffs$pickup_latitude)
jfk_plot_dropoff <- ggplot(jfk_dropoff_lonlat) + stat_binhex(aes(x=x, y=y), bins=300) +
scale_fill_gradientn(colours=c("black","green"))
plot_grid(jfk_plot_pickup, jfk_plot_dropoff, labels = c('To', 'From'))
manh_nw <- list(lat = 40.881333, lon = -74.017639)
manh_se <- list(lat = 40.700943, lon = -73.910522)
trips_manh_jfk <- df %>%
filter(manh_nw$lon < pickup_longitude & pickup_longitude < manh_se$lon ) %>%
filter(manh_se$lat < pickup_latitude & pickup_latitude < manh_nw$lat) %>%
filter(jfk_nw$lon < dropoff_longitude & dropoff_longitude < jfk_se$lon ) %>%
filter(jfk_se$lat < dropoff_latitude & dropoff_latitude < jfk_nw$lat)
plot1 <- ggplot(trips_manh_jfk, aes(trip_time_in_secs/60)) + stat_ecdf()
plot2 <- ggplot(trips_manh_jfk, aes(trip_time_in_secs/60)) + geom_histogram(bins = 35)
plot_grid(plot1, plot2, labels= c("edcd", "hist"))
quantile(df,probs=c(.025,.975))
quantile(trips_manh_jfk ,probs=c(.025,.975))
quantile(trips_manh_jfk ,probs=c(.025,.975))
trips_manh_jfk <- df %>%
filter(manh_nw$lon < pickup_longitude & pickup_longitude < manh_se$lon ) %>%
filter(manh_se$lat < pickup_latitude & pickup_latitude < manh_nw$lat) %>%
filter(jfk_nw$lon < dropoff_longitude & dropoff_longitude < jfk_se$lon ) %>%
filter(jfk_se$lat < dropoff_latitude & dropoff_latitude < jfk_nw$lat)
plot1 <- ggplot(trips_manh_jfk, aes(trip_time_in_secs/60)) + stat_ecdf()
plot2 <- ggplot(trips_manh_jfk, aes(trip_time_in_secs/60)) + geom_histogram(bins = 35)
plot_grid(plot1, plot2, labels= c("edcd", "hist"))
quantile(trips_manh_jfk ,probs=c(.025,.975))
#df <- df[!is.na(df$trip_time_in_secs), ]
trips_manh_jfk
#df <- df[!is.na(df$trip_time_in_secs), ]
quantile(trips_manh_jfk$trip_time_in_secs ,probs=c(.025,.975))
#df <- df[!is.na(df$trip_time_in_secs), ]
quantile(trips_manh_jfk$trip_time_in_secs ,probs=c(.025,.975))
trips_manh_jfk <- trips_manh_jfk[!is.na(trips_manh_jfk$trip_time_in_secs), ]
quantile(trips_manh_jfk$trip_time_in_secs ,probs=c(.025,.975))
quantile(trips_manh_jfk ,probs=c(.025,.975))
trips_manh_jfk <- trips_manh_jfk[!is.na(trips_manh_jfk$trip_time_in_secs), ]
quantile(trips_manh_jfk ,probs=c(.025,.975))
trips_manh_jfk <- trips_manh_jfk[!is.na(trips_manh_jfk$trip_time_in_secs), ]
quantile(trips_manh_jfk$trip_time_in_secs ,probs=c(.025,.975))
dropoff_by_hour <- cut(trips_manh_jfk$dropoff_datetime, breaks="1 hour", labels=FALSE)-1
ts_dropoff <- trips_manh_jfk %>%
mutate(hour = dropoff_by_hour) %>%
group_by(hour) %>%
summarise(q5 = quantile(trip_time_in_secs/60, prob=0.05),
q25 = quantile(trip_time_in_secs/60, prob=0.25),
q50 = median(trip_time_in_secs/60),
q75 = quantile(trip_time_in_secs/60, prob=0.75),
q95 = quantile(trip_time_in_secs/60, prob=0.95))
ts_dropoff$hour <- as.POSIXct(ts_dropoff$hour*3600, origin = "1970-01-01", tz = "UTC")
ggplot(ts_dropoff, aes(x=hour)) +
geom_line(aes(y=q50, alpha = "  Median   ")) +
geom_ribbon(aes(ymin = q25, ymax = q75, alpha = " 25–75th percentile   ")) +
geom_ribbon(aes(ymin = q5, ymax = q95, alpha = "10–90th percentile")) +
scale_alpha_manual("", values = c(1, 0.2, 0.2)) +
scale_y_continuous("trip duration in minutes\n") +
scale_x_datetime(labels = date_format("%k"),
breaks = date_breaks("3 hours"),
minor_breaks = date_breaks("1 hour")) +
xlab("") + ylab("Min") +
ggtitle("Tiempo de viaje desde Manhantan a JFK")
# Incluir tu estimación propia de cada umbral (0-23)
start_daytime <- 6
end_daytime <- 20
daytime <- df %>% filter(start_daytime <= hour(pickup_datetime) & hour(pickup_datetime) < end_daytime)
nighttime <- df %>% filter(! (start_daytime <= hour(pickup_datetime) & hour(pickup_datetime) < end_daytime))
daytime_plot <- ggplot(daytime) + stat_binhex(aes(x=pickup_longitude, y=pickup_latitude), bins=300) +
scale_fill_gradientn(colours=c("gray","black"))
nighttime_plot <- ggplot(nighttime) + stat_binhex(aes(x=pickup_longitude, y=pickup_latitude), bins=300) +
scale_fill_gradientn(colours=c("gray","black"))
plot_grid(daytime_plot, nighttime_plot, labels = c("day", "night"))
